name: Continuous Delivery
run-name: Publish Release Assets
on:
  workflow_run:
    workflows:
      - Continuous Integration
    branches:
      - 'releases/**'
    types:
      - completed

jobs:
  release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: write
    outputs:
      full-version: ${{ steps.tag.outputs.fullVersion }}
      major-version: ${{ steps.tag.outputs.majorVersion }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch  }}
      - id: tag
        run: |
          fullVersion=$(cat version.go | grep "const Version" | awk '{print $4}' | sed 's/"//g')
          majorVersion=$(echo "$fullVersion" | awk -F '.' '{print $1}')
          git tag $fullVersion
          git push --tags origin $fullVersion
          git tag --force $majorVersion
          git push --tags --force origin $majorVersion
          echo "fullVersion=$fullVersion" >> "$GITHUB_OUTPUT"
          echo "majorVersion=$majorVersion" >> "$GITHUB_OUTPUT"
      - uses: softprops/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ steps.tag.outputs.fullVersion }}
          name: "Captain ${{ steps.tag.outputs.fullVersion }}"
      - uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.majorVersion }}
          name: "Captain ${{ steps.tag.outputs.majorVersion }}"
  upload:
    name: Upload artifacts
    runs-on: ubuntu-latest
    needs: release
    environment: Production
    permissions:
      contents: write
      id-token: write
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch  }}
      - uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            keep-derivations = true
            keep-outputs = true
      - run: GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} CGO_ENABLED=0 LDFLAGS="-w -s" nix develop --command mage
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::152560469324:role/captain-cli-cd
          role-duration-seconds: 900
      - id: build-unix
        if: ${{ matrix.os != 'windows' }}
        run: |
          version=$(nix develop --command go run ./cmd/captain --version)
          old_artifact_name=$(echo "captain-${{ matrix.os }}-${{ matrix.arch }}-$version" | tr '[:upper:]' '[:lower:]')
          aws s3 cp ./captain "s3://terraform-20221109133415397600000001/$old_artifact_name"

          if [[ "${{ matrix.arch }}" == "amd64" ]]; then
            new_arch="x86_64"
          elif [[ "${{ matrix.arch }}" == "arm64" ]]; then
            new_arch="aarch64"
          else
            echo "unmapped arch: ${{ matrix.arch }}"
            exit 1
          fi
          new_artifact_name=$(echo "$version/${{ matrix.os }}/$new_arch/captain" | tr '[:upper:]' '[:lower:]')
          aws s3 cp ./captain "s3://terraform-20221109133415397600000001/$new_artifact_name"

          github_asset_name=$(echo "captain-${{ matrix.os }}-$new_arch" | tr '[:upper:]' '[:lower:]')
          mv captain $github_asset_name
          gh release upload ${{ needs.release.outputs.full-version }} $github_asset_name
          gh release upload --clobber ${{ needs.release.outputs.major-version }} $github_asset_name
        env:
          GH_TOKEN: ${{ github.token }}
          RWX_ACCESS_TOKEN: ${{ secrets.RWX_ACCESS_TOKEN }}
      - id: build-windows
        if: ${{ matrix.os == 'windows' }}
        run: |
          version=$(nix develop --command go run ./cmd/captain --version)
          old_artifact_name=$(echo "captain-${{ matrix.os }}-$new_arch-$version" | tr '[:upper:]' '[:lower:]')
          aws s3 cp ./captain.exe "s3://terraform-20221109133415397600000001/$old_artifact_name"

          if [[ "${{ matrix.arch }}" == "amd64" ]]; then
            new_arch="x86_64"
          elif [[ "${{ matrix.arch }}" == "arm64" ]]; then
            new_arch="aarch64"
          else
            echo "unmapped arch: ${{ matrix.arch }}"
            exit 1
          fi
          new_artifact_name=$(echo "$version/${{ matrix.os }}/$new_arch/captain.exe" | tr '[:upper:]' '[:lower:]')
          aws s3 cp ./captain.exe "s3://terraform-20221109133415397600000001/$new_artifact_name"

          github_asset_name=$(echo "captain-${{ matrix.os }}-$new_arch.exe" | tr '[:upper:]' '[:lower:]')
          mv captain.exe $github_asset_name
          gh release upload ${{ needs.release.outputs.full-version }} $github_asset_name
          gh release upload --clobber ${{ needs.release.outputs.major-version }} $github_asset_name
        env:
          GH_TOKEN: ${{ github.token }}
          RWX_ACCESS_TOKEN: ${{ secrets.RWX_ACCESS_TOKEN }}

  deliver-binaries:
    name: Deliver binaries
    runs-on: ubuntu-latest
    environment: Production
    permissions:
      contents: read
      id-token: write
    needs: upload
    steps:
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::152560469324:role/captain-cli-cd
          role-duration-seconds: 900
      - id: list-bucket
        run: |
          objects=$(aws s3api list-objects --bucket terraform-20221109133415397600000001 --query 'Contents[].Key' --output=json | jq -r '.[]')

          echo "objects<<EOF" >> "$GITHUB_OUTPUT"
          echo "$objects" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
      # Note: when removing support for the old version paths, update this to look at the new version paths
      - id: find-versions
        run: |
          versions=$(echo "${{ steps.list-bucket.outputs.objects }}" | grep "[-]v" | sed 's/.*-v/v/' | sed '/-/!{s/$/_/}' | sort -ruV | sed 's/_$//' | grep -v "^v1$")
          allVersions=$(printf "%s\n" $versions | jq --raw-input | jq --slurp)
          latestV1=$(printf "%s\n" $versions | grep -v "-" | grep "v1" | head -n 1)

          echo "allVersions<<EOF" >> "$GITHUB_OUTPUT"
          echo "$allVersions" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

          echo "latestV1=$latestV1" >> "$GITHUB_OUTPUT"
      - id: release-versions
        run: |
          jq -n \
            --argjson versions '${{ steps.find-versions.outputs.allVersions }}' \
            --arg latestV1 '${{ steps.find-versions.outputs.latestV1 }}' \
            '{captain: {v1: $latestV1, versions: $versions}}' > versions.json

          echo "Uploading versions.json"
          aws s3 mv ./versions.json "s3://terraform-20221109133415397600000001/versions.json"
          paths="\"/versions.json\""

          latestOldV1Binaries=$(echo "${{ steps.list-bucket.outputs.objects }}" | grep -E '^captain-[^-]+-[^-]+-${{ steps.find-versions.outputs.latestV1 }}$')
          for binary in $latestOldV1Binaries
          do
            aliasedBinary=$(echo "$binary" | sed "s/${{ steps.find-versions.outputs.latestV1 }}/v1/g")
            echo "Uploading $binary to $aliasedBinary"
            aws s3 cp "s3://terraform-20221109133415397600000001/$binary" "s3://terraform-20221109133415397600000001/$aliasedBinary"
            paths="$paths \"/$aliasedBinary\""
          done

          latestNewV1Binaries=$(echo "${{ steps.list-bucket.outputs.objects }}" | grep -E '^${{ steps.find-versions.outputs.latestV1 }}/[^/]+/[^/]+/captain(\.exe)?$')
          for binary in $latestNewV1Binaries
          do
            aliasedBinary=$(echo "$binary" | sed "s/${{ steps.find-versions.outputs.latestV1 }}/v1/g")
            echo "Uploading $binary to $aliasedBinary"
            aws s3 cp "s3://terraform-20221109133415397600000001/$binary" "s3://terraform-20221109133415397600000001/$aliasedBinary"
            paths="$paths \"/$aliasedBinary\""
          done

          echo "updatedPaths=$paths" >> "$GITHUB_OUTPUT"
      - run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths ${{ steps.release-versions.outputs.updatedPaths }}
