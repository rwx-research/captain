on:
  cron:
    - key: ensure-test-file-timings
      schedule: "35 2 * * 2" # At 02:35 every Tuesday
      init:
        commit-sha: ${{ event.git.sha }}

base:
  os: ubuntu 24.04
  tag: 1.0

tasks:
  - key: code
    call: mint/git-clone 1.6.1
    with:
      repository: https://github.com/rwx-research/captain.git
      ref: ${{ init.commit-sha }}
      github-access-token: ${{ github.token }}

  - key: tool-versions
    use: code
    run: |
      grep "golang " .tool-versions | awk '{print $2}' | tee $MINT_VALUES/golang
      grep mage .tool-versions | awk '{print $2}' | tee $MINT_VALUES/mage
      grep ginkgo .tool-versions | awk '{print $2}' | tee $MINT_VALUES/ginkgo
    filter:
      - .tool-versions

  - key: golang
    call: mint/install-go 1.1.0
    with:
      go-version: ${{ tasks.tool-versions.values.golang }}

  - key: mage-source
    call: mint/git-clone 1.6.1
    with:
      repository: https://github.com/magefile/mage.git
      ref: v${{ tasks.tool-versions.values.mage }}
      path: /tmp/mage

  - key: mage
    use: [mage-source, golang]
    run: |
      cd /tmp/mage
      mkdir $HOME/go # Mage assumes this already exists
      go run bootstrap.go
      echo $PATH:$HOME/go/bin > $MINT_ENV/PATH

  - key: ginkgo-source
    call: mint/git-clone 1.6.1
    with:
      repository: https://github.com/onsi/ginkgo.git
      ref: v${{ tasks.tool-versions.values.ginkgo }}
      path: /tmp/ginkgo

  - key: ginkgo
    use: [ginkgo-source, golang]
    run: |
      cd /tmp/ginkgo
      go install ./ginkgo
      echo $PATH:$HOME/go/bin > $MINT_ENV/PATH

  - key: build
    use: [code, mage]
    run: mage
    env:
      CGO_ENABLED: 0
      LDFLAGS: -w -s -X github.com/rwx-research/captain-cli.Version=testing-${{ init.commit-sha }}

  - key: test
    use: [build, ginkgo]
    env:
      CGO_ENABLED: 0
      LDFLAGS: -w -s -X github.com/rwx-research/captain-cli.Version=testing-${{ init.commit-sha }}
      REPORT: true
      RWX_ACCESS_TOKEN_STAGING: ${{ secrets.RWX_ACCESS_TOKEN_STAGING }} # used from within the tests against staging
    run: ./captain run captain-cli-ginkgo

  - key: test-alternate-filename
    use: [build, ginkgo]
    env:
      CGO_ENABLED: 0
      LDFLAGS: -w -s -X github.com/rwx-research/captain-cli.Version=testing-${{ init.commit-sha }}
      REPORT: true
      RWX_ACCESS_TOKEN_STAGING: ${{ secrets.RWX_ACCESS_TOKEN_STAGING }} # used from within the tests against staging
    run: |
      mv .captain/config.yaml .captain/config.yml
      ./captain run captain-cli-ginkgo --command mage unittest

  - key: test-without-config
    use: [build, ginkgo]
    env:
      CGO_ENABLED: 0
      LDFLAGS: -w -s -X github.com/rwx-research/captain-cli.Version=testing-${{ init.commit-sha }}
      REPORT: true
      RWX_ACCESS_TOKEN_STAGING: ${{ secrets.RWX_ACCESS_TOKEN_STAGING }} # used from within the tests against staging
    run: |
      rm -rf .captain
      ./captain run \
        --command "mage unittest" \
        --fail-on-upload-error true \
        --reporter github-step-summary \
        --test-results report.xml
