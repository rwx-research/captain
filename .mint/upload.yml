tasks:
  - key: code
    call: mint/git-clone 1.6.1
    with:
      repository: https://github.com/rwx-research/captain.git
      ref: ${{ init.commit-sha }}
      github-access-token: ${{ github.token }}

  - key: tool-versions
    use: code
    run: |
      grep "golang " .tool-versions | awk '{print $2}' | tee $MINT_VALUES/golang
      grep mage .tool-versions | awk '{print $2}' | tee $MINT_VALUES/mage
    filter:
      - .tool-versions

  - key: golang
    call: mint/install-go 1.1.0
    with:
      go-version: ${{ tasks.tool-versions.values.golang }}

  - key: mage-source
    call: mint/git-clone 1.6.1
    with:
      repository: https://github.com/magefile/mage.git
      ref: v${{ tasks.tool-versions.values.mage }}
      path: /tmp/mage

  - key: mage
    use: [mage-source, golang]
    run: |
      cd /tmp/mage
      mkdir $HOME/go # Mage assumes this already exists
      go run bootstrap.go
      echo $PATH:$HOME/go/bin > $MINT_ENV/PATH

  - key: build-binary
    use: [code, mage]
    run: mage build
    env:
      GOOS: ${{ init.os }}
      GOARCH: ${{ init.arch }}
      CGO_ENABLED: 0
      LDFLAGS: -w -s -X github.com/rwx-research/captain-cli.Version=${{ init.full-version }}

  - key: github-cli
    call: github/install-cli 1.0.1

  - key: upload
    if: ${{ init.os != 'darwin' }}
    use: [build-binary, github-cli]
    run: |
      if [[ "${{ init.os }}" == "windows" ]]; then
        extension=".exe"
      fi
      if [[ "${{ init.arch }}" == "arm64" ]]; then
        arch="aarch64"
      fi
      if [[ "${{ init.arch }}" == "amd64" ]]; then
        arch="x86_64"
      fi
      github_asset_name=$(echo "captain-${{ init.os }}-$arch$extension" | tr '[:upper:]' '[:lower:]')
      mv "captain$extension" "$github_asset_name"
      gh release upload ${{ init.full-version }} "$github_asset_name" --clobber --repo rwx-research/captain
    env:
      GH_TOKEN: ${{ vaults.default.github-apps.rwx-bot.token }}

  - key: zip
    run: sudo apt-get update && sudo apt-get install -y zip

  - key: notarize
    use: [build-binary, zip]
    if: ${{ init.os == 'darwin' }}
    run: |
      curl -fsSLO https://github.com/indygreg/apple-platform-rs/releases/download/apple-codesign%2F0.22.0/apple-codesign-0.22.0-x86_64-unknown-linux-musl.tar.gz
      tar xzvf apple-codesign-0.22.0-x86_64-unknown-linux-musl.tar.gz --strip-components=1

      echo "$RWX_APPLE_DEVELOPER_ID_APPLICATION_CERT" > rwx-developer-id-application-cert.pem
      # first we sign the binary. This happens locally.
      ./rcodesign sign --pem-source rwx-developer-id-application-cert.pem --code-signature-flags runtime "./captain"
      # notarizing requires certain container formats, that's why we zip
      zip -r captain.zip "./captain"
      echo "$RWX_APPLE_APP_STORE_CONNECT_API_KEY" > rwx-apple-app-store-connect-api-key.json
      ./rcodesign notary-submit --wait --api-key-path rwx-apple-app-store-connect-api-key.json captain.zip
    env:
      CODESIGN_VERSION: 0.22.0
      RWX_APPLE_DEVELOPER_ID_APPLICATION_CERT: "${{ secrets.RWX_APPLE_DEVELOPER_ID_APPLICATION_CERT_CERTIFICATE }}${{ secrets.RWX_APPLE_DEVELOPER_ID_APPLICATION_CERT_PRIVATE_KEY }}"
      RWX_APPLE_APP_STORE_CONNECT_API_KEY: ${{ secrets.RWX_APPLE_APP_STORE_CONNECT_API_KEY }}

  - key: upload-darwin
    if: ${{ init.os == 'darwin' }}
    use: [notarize, github-cli]
    run: |
      if [[ "${{ init.arch }}" == "arm64" ]]; then
        arch="aarch64"
      fi
      if [[ "${{ init.arch }}" == "amd64" ]]; then
        arch="x86_64"
      fi
      github_asset_name=$(echo "captain-${{ init.os }}-$arch" | tr '[:upper:]' '[:lower:]')
      mv "captain" "$github_asset_name"
      gh release upload ${{ init.full-version }} "$github_asset_name" --clobber --repo rwx-research/captain
    env:
      GH_TOKEN: ${{ vaults.default.github-apps.rwx-bot.token }}
